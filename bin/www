#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('movielist:server');
var http = require('http');
const config = require('../config/config');
const mongoose = require('mongoose');

app.set('port', config.port);

app.listen(config.port);
app.on('error', onError);
app.on('listening', onListening);

//MongoDB connection
mongoose.connect(config.mongoose.url, config.mongoose.options)
    .then(() => {
        console.log("Connected to MongoDB");
    })
    .catch(e => console.log("Mongoose connection failed ", e));

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof config.port === 'string' ?
        'Pipe ' + config.port :
        'Port ' + config.port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}